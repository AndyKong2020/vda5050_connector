# HOW TO:	Depending on the level needed for publishing/receiving topics, 
# 		it is possible to activate/deactivate required topics.
# 		Example: If you want to subscribe to safetyState you have two options.

#		1. you want to subscribe to  safetyState topic itself by adding a value to the key,
#		e. g. adding a string to the safetyState key, which describes which topic you want to subscribe
#		and commenting eStop and fieldViolation (with a #).
#		In that case you have to create the safetyState msg and fill up the child values (eStop, fieldViolation) by yourself.
#
#		2. you want to subscribe to the child values (eStop, fieldViolation) directly.
#		remove the value from the parent key, here safetyState ( safetyState: should stay alone).
#		uncommend the child keys and add the values if not done so far
#		Add no value to the key, so the program is looking for the subordinated values.
#		it this case it is eStop and fieldViolation

#		!!! NOTE: You can't use key and value pairs for parents and childs at the same time, since the YAML-parser will throw an exception
#       !!! e. g. defining a topic for safetystate and the two childs is not possible



state_daemon:
    topics_publish:
        state: /state 
    topics_subscribe:
        orderId: "/TBD2"
        orderUpdateId: "/TBD3"                  #VDA5050 specific, Uint32
        zoneSetId: "/TBD4"                      #VDA5050 specific, string
        lastNodeId: "/TBD5"                     #VDA5050 specific, string
        lastNodeSequenceId: "/TBD6"             #VDA5050 specific, Uint32
        nodeState: "/TBD7"                      #VDA5050 specific, array
            # ADD nodeState	
        edgeState: "/TBD8"                      #VDA5050 specific, array
            # ADD edgeState
        agvPosition:                            #VDA5050 specific + partially covered by ROS common msg, JSON
            positionInitialized: "/TBD10"       #VDA5050 specific, boolean
            localizationScore: "/TBD11"         #VDA5050 specific, float64 (Range 0.0-1.0)
            deviationRange: "/TBD12"            #VDA5050 specific, float64
            rosPose: "/TBD1234"                 #non VDA5050 Topic to gain access to Odometry topic
#            x: "/TBD13"                         #ROS msg -> nav_msgs/Odometry Message.pose.pose.position.x, float64
#            y: "/TBD14"                         #ROS msg -> nav_msgs/Odometry Message.pose.pose.position.y, float64
#            theta: "/TBD15"
            mapId: "/TBD16"                     #VDA5050 specific, string
            mapDescription: "/TBD17"            #VDA5050 specific, string
        velocity:                               #ROS msg -> nav_msgs/Odometry Message.twist, aggregarted by ROS msg
            rosVelocity: "/TBD19"               #non VDA5050 Topic to gain access to Odometry topic
#            vx: "/TBD19"                        #ROS msg -> nav_msgs/Odometry Message.twist.twist.linear.x, float64
#            vy: "/TBD20"                        #ROS msg -> nav_msgs/Odometry Message.twist.twist.linear.y, float64
#            omega: "/TBD21"
        loads: "/TBD22"                         #VDA5050 specific, array
            # ADD loads
        driving: "/TBD23"                       #VDA5050 specific, boolean
        paused: "/TBD10"                        #VDA5050 specific, boolean
        newBaseRequest: "/TBD10"                #VDA5050 specific, boolean
        distanceSinceLastNode: "/TBD10"         #VDA5050 specific, float64
        actionStates: "/TBD10"                  #VDA5050 specific, array
            # ADD actionStates
        batteryState:                           #VDA5050 specific + partially covered by ROS common msg, JSON
            batteryCharge: "/TBD10"             #ROS msg -> sensor_msgs/Batterystate Message.percentage
            batteryVoltage: "/TBD10"            #ROS msg -> sensor_msgs/Batterystate Message.voltage
            batteryHealth: "/TBD10"             #VDA5050 specific, int8
            charging: "/TBD10"                  #VDA5050 specific, bool
            reach: "/TBD10"                     #VDA5050 specific, uint32
        operatingMode: "/TBD999"                #VDA5050 specific, string
        errors: "/ERROR4389"                    #VDA5050 specific, array
            # ADD error
        information: "/TBD10"                   #VDA5050 specific, array
            # ADD info
        safetyState:                            #VDA5050 specific, JSON
            eStop: "/TBD999"                    #VDA5050 specific, String
            fieldViolation: "/TBD999"           #VDA5050 specific, bool

order_daemon:
    topics_publish:
        order: /order_to_agv 
    topics_subscribe:
        order: /order_from_mc

topic_error: /error_1

AGV_Data:
    version: 1.1.03
    manufacturer: "template_1"
    serialNumber: "AGV721"




